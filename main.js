/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var v=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var k=Object.prototype.hasOwnProperty;var x=(y,h)=>{for(var t in h)v(y,t,{get:h[t],enumerable:!0})},$=(y,h,t,e)=>{if(h&&typeof h=="object"||typeof h=="function")for(let s of T(h))!k.call(y,s)&&s!==t&&v(y,s,{get:()=>h[s],enumerable:!(e=N(h,s))||e.enumerable});return y};var b=y=>$(v({},"__esModule",{value:!0}),y);var M={};x(M,{default:()=>C});module.exports=b(M);var l=require("obsidian"),A={properties:[{propertyName:"tipo",value:"todo",displayName:"Cambiar a Todo",keyBinding:"alt+1",propertyType:"text",allowMultipleValues:!1},{propertyName:"tipo",value:"doing",displayName:"Cambiar a Doing",keyBinding:"alt+2",propertyType:"text",allowMultipleValues:!1},{propertyName:"tipo",value:"done",displayName:"Cambiar a Done",keyBinding:"alt+3",propertyType:"text",allowMultipleValues:!1}],version:3,commandVersion:1},C=class extends l.Plugin{constructor(){super(...arguments);this.registeredCommandIds=[];this.commandPrefix="";this.allCreatedCommandIds=new Set;this.propertyCommandMap=new Map}async onload(){console.log("Loading YalmSwitcher Plugin v4.3.1"),this.commandPrefix=`yalm-switcher-v4-${Date.now()}`,await this.loadSettings(),this.cleanupAllCommands(),this.addSettingTab(new S(this.app,this)),this.refreshCommands(),this.registerDomEvent(document,"focusin",t=>{let e=t.target;(e instanceof HTMLInputElement||e instanceof HTMLTextAreaElement||e.contentEditable==="true")&&this.cleanupInputEvents()})}onunload(){console.log("Unloading YalmSwitcher Plugin"),this.cleanupAllCommands(),this.cleanupInputEvents()}async loadSettings(){let t=await this.loadData();t&&t.version===3?this.settings=t:(t&&t.properties?this.settings={properties:t.properties,version:3,commandVersion:1}:this.settings=A,await this.saveSettings())}async saveSettings(){this.settings.commandVersion+=1,await this.saveData(this.settings),this.refreshCommands()}refreshUI(){this.refreshCommands()}refreshCommands(){let t=[...this.registeredCommandIds];this.registeredCommandIds=[],this.cleanupAllCommands(),this.propertyCommandMap.clear(),this.settings.properties.forEach((e,s)=>{let a=`${e.propertyName}:${e.value}`,i=`${this.commandPrefix}-v${this.settings.commandVersion}-${s}`;this.propertyCommandMap.set(a,i),this.app.commands.commands[i]||this.addCommand({id:i,name:e.displayName,callback:async()=>{await this.updateYamlProperty(e)},hotkeys:e.keyBinding?[{modifiers:this.parseHotkeyModifiers(e.keyBinding),key:this.parseHotkeyKey(e.keyBinding)}]:[]}),this.registeredCommandIds.push(i),this.allCreatedCommandIds.add(i)}),this.app.workspace.trigger("css-change"),this.saveObsidianKeymap()}async updateYamlProperty(t){var a;let e=this.app.workspace.getActiveViewOfType(l.MarkdownView);if(!e){new l.Notice("No active Markdown note");return}let s=e.file;if(!s){new l.Notice("Could not access file");return}try{let i=await this.app.vault.read(s),c=i.startsWith("---"),p="";if(!c)t.propertyType==="list"?p=`---
${t.propertyName}:
  - ${t.value}
---
${i}`:p=`---
${t.propertyName}: ${t.value}
---
${i}`,await this.app.vault.modify(s,p),new l.Notice(`Added property ${t.propertyName}: ${t.value}`);else{let u=/^---\n([\s\S]*?)\n---/,n=i.match(u);if(n){let o=n[1],d=new RegExp(`^${t.propertyName}:.*`,"m").test(o),r=new RegExp(`^${t.propertyName}:\\s*
\\s*-.*`,"m").test(o);if(d)if(t.propertyType==="list")if(r)if(t.allowMultipleValues)if(new RegExp(`^\\s*-\\s*${t.value}\\s*$`,"m").test(o)){new l.Notice(`Value ${t.value} already exists in ${t.propertyName}`);return}else{let g=o.match(new RegExp(`(${t.propertyName}:\\s*
(?:\\s*-[^
]*
)*)`,"m"));if(g){let f=g[1],E=f+`  - ${t.value}
`;o=o.replace(f,E)}}else{let m=new RegExp(`${t.propertyName}:\\s*
(?:\\s*-[^
]*
)*`,"m");o=o.replace(m,`${t.propertyName}:
  - ${t.value}
`)}else{let m=o.match(new RegExp(`^${t.propertyName}:.*$`,"m"));if(m&&m[0]){let g=(a=m[0].split(":")[1])==null?void 0:a.trim();t.allowMultipleValues&&g&&g!==t.value?o=o.replace(m[0],`${t.propertyName}:
  - ${g}
  - ${t.value}`):o=o.replace(m[0],`${t.propertyName}:
  - ${t.value}`)}}else if(r){let m=new RegExp(`${t.propertyName}:\\s*
(?:\\s*-[^
]*
)*`,"m");o=o.replace(m,`${t.propertyName}: ${t.value}
`)}else o=o.replace(new RegExp(`^${t.propertyName}:.*$`,"m"),`${t.propertyName}: ${t.value}`);else t.propertyType==="list"?o+=`
${t.propertyName}:
  - ${t.value}`:o+=`
${t.propertyName}: ${t.value}`;p=i.replace(u,`---
${o}
---`),await this.app.vault.modify(s,p),new l.Notice(`Updated property ${t.propertyName} with ${t.value}`)}}}catch(i){console.error("Error updating YAML:",i),new l.Notice("Error updating YAML. See console for details.")}}parseHotkeyModifiers(t){let e=[],s=t.toLowerCase();return(s.includes("ctrl+")||s.includes("control+"))&&e.push("Mod"),s.includes("alt+")&&e.push("Alt"),s.includes("shift+")&&e.push("Shift"),e}parseHotkeyKey(t){let e=t.split("+");return e[e.length-1]}async addNewShortcut(t){this.settings.properties.push(t),await this.saveSettings()}async updateShortcut(t,e){t>=0&&t<this.settings.properties.length&&(this.settings.properties[t]=e,await this.saveSettings())}async removeShortcut(t){if(t>=0&&t<this.settings.properties.length){let e=this.settings.properties[t],s=`${this.commandPrefix}-v${this.settings.commandVersion}-${t}`;this.settings.properties.splice(t,1),this.removeSpecificCommand(s),await this.saveSettings(),new l.Notice(`Shortcut "${e.displayName}" (${e.keyBinding}) has been removed.
The specific shortcut has been removed from the system.`,5e3)}}removeSpecificCommand(t){try{let e=this.app.commands.commands;if(e&&e[t]){console.log(`Eliminando comando espec\xEDfico: ${t}`);try{return delete this.app.commands.commands[t],this.registeredCommandIds=this.registeredCommandIds.filter(s=>s!==t),this.saveObsidianKeymap(),!0}catch(s){return console.log(`No se pudo eliminar el comando espec\xEDfico: ${t}`,s),!1}}return!1}catch(e){return console.log("Error al intentar eliminar comando espec\xEDfico",e),!1}}saveObsidianKeymap(){try{this.app.commands.saveKeymap&&this.app.commands.saveKeymap()}catch(t){console.error("Error al guardar el keymap de Obsidian",t)}}attemptToCleanOldCommands(){try{let t=this.app.commands.commands;if(t){let e=Object.keys(t).filter(s=>s.startsWith("yalm-switcher")&&!this.registeredCommandIds.includes(s));e.length>0&&console.log(`Intentando limpiar ${e.length} comandos antiguos: ${e.join(", ")}`),e.forEach(s=>{try{delete this.app.commands.commands[s]}catch(a){console.log(`No se pudo eliminar el comando: ${s}`,a)}}),e.length>0&&(this.app.workspace.trigger("css-change"),this.saveObsidianKeymap())}}catch(t){console.log("Error al intentar limpiar comandos antiguos",t)}}cleanupAllCommands(){try{let t=this.app.commands.commands;if(t){let e=Object.keys(t).filter(s=>s.startsWith("yalm-switcher"));e.length>0&&console.log(`Limpiando ${e.length} comandos del plugin`),e.forEach(s=>{try{delete this.app.commands.commands[s]}catch(a){console.log(`No se pudo eliminar el comando: ${s}`,a)}}),e.length>0&&(this.app.workspace.trigger("css-change"),this.saveObsidianKeymap())}}catch(t){console.log("Error al intentar limpiar todos los comandos",t)}}async clearAllShortcuts(){let t=this.settings.properties.length;this.settings.properties=[],this.settings.commandVersion+=100,this.commandPrefix=`yalm-switcher-v4-${Date.now()}`,this.cleanupAllCommands(),await this.saveSettings(),new l.Notice(`${t} shortcuts have been removed.
All system shortcuts have been cleaned.`,5e3)}cleanupInputEvents(){var t,e,s;try{let a=(s=(e=(t=this.app.workspace)==null?void 0:t.getActiveViewOfType("window"))==null?void 0:e.containerEl)==null?void 0:s.querySelectorAll(".modal");a&&a.length>0&&Array.from(a).forEach(i=>{let c=i.__component__;c&&typeof c.stopCapturingHotkey=="function"&&c.stopCapturingHotkey()})}catch(a){console.log("Error cleaning up input events:",a)}}},S=class extends l.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"YALM Switcher Settings"}),t.createEl("div",{cls:"setting-item setting-item-heading",text:"Shortcuts to modify YAML properties"}),t.createEl("p").setText("Each shortcut will modify the specified YAML property with the provided value.");let s=t.createEl("div"),a=()=>{s.empty();let i=s.createEl("table",{cls:"shortcut-table"}),p=i.createEl("thead").createEl("tr");p.createEl("th",{text:"Name"}),p.createEl("th",{text:"YAML Property"}),p.createEl("th",{text:"Value"}),p.createEl("th",{text:"Keyboard Shortcut"}),p.createEl("th",{text:"Type"}),p.createEl("th",{text:"Actions"});let u=i.createEl("tbody");this.plugin.settings.properties.forEach((o,d)=>{let r=u.createEl("tr");r.createEl("td",{text:o.displayName||`Shortcut ${d+1}`}),r.createEl("td",{text:o.propertyName}),r.createEl("td",{text:o.value}),r.createEl("td",{text:o.keyBinding});let m=o.propertyType==="list"?"List":"Text";o.propertyType==="list"&&(m+=o.allowMultipleValues?" (Multiple)":" (Single)"),r.createEl("td",{text:m});let f=r.createEl("td").createEl("div",{cls:"shortcut-actions"});f.createEl("button",{cls:"shortcut-action-button",text:"Edit"}).addEventListener("click",()=>{new w(this.app,this.plugin,d,o,()=>{a()}).open()}),f.createEl("button",{cls:"shortcut-action-button",text:"Delete"}).addEventListener("click",()=>{this.plugin.removeShortcut(d),a()})});let n=s.createEl("div",{cls:"global-actions-container"});this.plugin.settings.properties.length>0&&n.createEl("button",{cls:"shortcut-action-button delete-all-button",text:"Delete all shortcuts (restart required)"}).addEventListener("click",()=>{window.confirm("Are you sure you want to delete all shortcuts? This action cannot be undone.")&&(this.plugin.clearAllShortcuts(),a(),new l.Notice("All shortcuts have been removed. Restart Obsidian to completely clean keyboard shortcuts."))}),new l.Setting(s).setName("Add new shortcut").setDesc("Add a new shortcut to modify a YAML property").addButton(o=>{o.setButtonText("Add").setCta().onClick(()=>{let d={propertyName:"",value:"",displayName:"",keyBinding:"",propertyType:"text",allowMultipleValues:!1};new w(this.app,this.plugin,-1,d,()=>{a()}).open()})})};a()}},w=class extends l.Modal{constructor(t,e,s,a,i){super(t);this.isCapturingHotkey=!1;this.shouldAutoGenerateName=!0;this.plugin=e,this.shortcutIndex=s,this.shortcut=a,this.onSave=i,this.tempShortcut=JSON.parse(JSON.stringify(a)),this.tempShortcut.propertyType||(this.tempShortcut.propertyType="text"),this.tempShortcut.allowMultipleValues===void 0&&(this.tempShortcut.allowMultipleValues=!1),this.shouldAutoGenerateName=!this.tempShortcut.displayName||this.tempShortcut.displayName===""}onOpen(){let{contentEl:t}=this;t.empty(),this.contentEl.addEventListener("DOMNodeRemoved",n=>{n.target===this.contentEl&&this.isCapturingHotkey&&this.stopCapturingHotkey()}),t.createEl("h2",{text:this.shortcutIndex>=0?"Edit shortcut":"New shortcut"}),new l.Setting(t).setName("YAML Property").setDesc("The property key in the frontmatter").addText(n=>{this.propertyTextComponent=n,n.setPlaceholder("e.g. status, priority, category").setValue(this.tempShortcut.propertyName||"").onChange(o=>{this.tempShortcut.propertyName=o,this.shouldAutoGenerateName&&this.updateAutoGeneratedName()})}),new l.Setting(t).setName("Value").setDesc("The value to assign to the property").addText(n=>{this.valueTextComponent=n,n.setPlaceholder("e.g. todo").setValue(this.tempShortcut.value||"").onChange(o=>{this.tempShortcut.value=o,this.shouldAutoGenerateName&&this.updateAutoGeneratedName()})}),new l.Setting(t).setName("Shortcut name").setDesc("A descriptive name for the shortcut").addText(n=>{this.displayNameTextComponent=n,n.setValue(this.tempShortcut.displayName||"").onChange(o=>{this.tempShortcut.displayName=o})}).addToggle(n=>{this.autoGenerateNameToggle=n.setValue(this.shouldAutoGenerateName).setTooltip("Auto-generate name").onChange(o=>{this.shouldAutoGenerateName=o,o?(this.updateAutoGeneratedName(),this.displayNameTextComponent.setDisabled(!0)):this.displayNameTextComponent.setDisabled(!1)}),this.shouldAutoGenerateName&&(this.displayNameTextComponent.setDisabled(!0),this.updateAutoGeneratedName())}),new l.Setting(t).setName("Keyboard shortcut").setDesc("The key combination to activate the shortcut (e.g. alt+1)").addText(n=>{this.hotkeyTextComponent=n,n.setPlaceholder("e.g. alt+1").setValue(this.tempShortcut.keyBinding||"").onChange(o=>{this.tempShortcut.keyBinding=o})}).addButton(n=>{this.captureButton=n.setButtonText("Capture shortcut").setClass("shortcut-capture-button").onClick(()=>{this.startCapturingHotkey()}).buttonEl});let a=new l.Setting(t).setName("Property Type").setDesc("Select whether this property should be stored as text or as a list");this.propertyTypeDropdown=document.createElement("select");let i=document.createElement("option");i.value="text",i.text="Text (single value)";let c=document.createElement("option");c.value="list",c.text="List",this.propertyTypeDropdown.appendChild(i),this.propertyTypeDropdown.appendChild(c),this.propertyTypeDropdown.value=this.tempShortcut.propertyType||"text",this.propertyTypeDropdown.addEventListener("change",n=>{this.tempShortcut.propertyType=n.target.value,this.tempShortcut.propertyType==="list"?p.style.display="":(p.style.display="none",this.tempShortcut.allowMultipleValues=!1)}),a.controlEl.appendChild(this.propertyTypeDropdown);let p=t.createEl("div"),u=new l.Setting(p).setName("Allow Multiple Values").setDesc("If enabled, allows adding multiple values to the list property rather than replacing the value").addToggle(n=>{n.setValue(this.tempShortcut.allowMultipleValues||!1).onChange(o=>{this.tempShortcut.allowMultipleValues=o})});this.tempShortcut.propertyType!=="list"&&(p.style.display="none"),new l.Setting(t).addButton(n=>{n.setButtonText("Save").setCta().onClick(()=>{if(!this.tempShortcut.propertyName||!this.tempShortcut.value){new l.Notice("Property and value are required");return}this.tempShortcut.displayName||this.updateAutoGeneratedName(),this.shortcutIndex>=0?this.plugin.updateShortcut(this.shortcutIndex,this.tempShortcut):this.plugin.addNewShortcut(this.tempShortcut),this.onSave(),this.close()})}).addButton(n=>{n.setButtonText("Cancel").onClick(()=>{this.close()})})}updateAutoGeneratedName(){if(!this.tempShortcut.propertyName||!this.tempShortcut.value)return;let t=this.tempShortcut.propertyName.trim(),e=this.tempShortcut.value.trim(),s=n=>n?n.charAt(0).toUpperCase()+n.slice(1).toLowerCase():"",a=t.split(/[-_\s]/).map(n=>s(n)).join(" "),i=e.split(/[-_\s]/).map(n=>s(n)).join(" "),c=`${a}: ${i}`,p=t.toLowerCase(),u=e.toLowerCase();["check","done","completed","checked","completado","terminado","finalizado"].includes(p)?["true","yes","si","s\xED","y","s","t","1","verdadero"].includes(u)?c="Mark as Completed":["false","no","n","f","0","falso"].includes(u)&&(c="Mark as Pending"):p==="status"||p==="state"||p==="estado"&&this.app.vault.getName().includes("es")?["todo","pending","pendiente","por hacer","nueva","new"].includes(u)?c="Status: To Do":["doing","progress","progreso","en curso","haciendo","in progress","working"].includes(u)?c="Status: In Progress":["done","complete","completed","completado","terminado","finalizado","hecho"].includes(u)?c="Status: Completed":["cancelled","cancelado","canceled","abandonado","abandoned"].includes(u)?c="Status: Cancelled":c=`Status: ${i}`:(p==="priority"||p==="prioridad"||p==="importancia"&&this.app.vault.getName().includes("es"))&&(["high","alta","urgent","urgente","1","a"].includes(u)?c="Priority: High":["medium","media","normal","2","b","m"].includes(u)?c="Priority: Medium":["low","baja","3","c","l"].includes(u)?c="Priority: Low":c=`Priority: ${i}`),this.tempShortcut.displayName=c,this.displayNameTextComponent&&this.displayNameTextComponent.setValue(c)}startCapturingHotkey(){if(this.isCapturingHotkey){this.stopCapturingHotkey();return}this.isCapturingHotkey=!0,this.captureButton.textContent="Press keys...",this.captureButton.addClass("capturing-hotkey"),this.hotkeyTextComponent.setValue("");let t=new Set,e=new Set,s="",a=null,i=d=>{if(!this.isCapturingHotkey||!this.contentEl.contains(d.target)&&d.target!==document.body)return;d.preventDefault(),d.stopPropagation(),a&&clearTimeout(a),d.ctrlKey&&!t.has("Ctrl")&&(t.add("Ctrl"),e.add("Ctrl")),d.altKey&&!t.has("Alt")&&(t.add("Alt"),e.add("Alt")),d.shiftKey&&!t.has("Shift")&&(t.add("Shift"),e.add("Shift"));let r=d.key;r===" "&&(r="Space"),!(r==="Control"||r==="Alt"||r==="Shift")&&(r.length===1&&(r=r.toLowerCase()),s=r,t.add(r),a=setTimeout(()=>{p()},500))},c=d=>{if(!this.isCapturingHotkey||!this.contentEl.contains(d.target)&&d.target!==document.body)return;let r=d.key===" "?"Space":d.key;r!=="Control"&&r!=="Alt"&&r!=="Shift"&&s&&p(),t.delete(r==="Control"?"Ctrl":r)},p=()=>{if(!s){o();return}let r=[...Array.from(e),s].join("+");this.hotkeyTextComponent.setValue(r),this.tempShortcut.keyBinding=r,o(),new l.Notice(`Shortcut captured: ${r}`)};document.addEventListener("keydown",i,{capture:!0}),document.addEventListener("keyup",c,{capture:!0});let u=d=>{this.captureButton.contains(d.target)||o()};document.addEventListener("mousedown",u);let n=setTimeout(()=>{this.isCapturingHotkey&&(console.log("Safety timeout triggered for shortcut capture"),o())},3e4),o=()=>{this.isCapturingHotkey&&(a&&clearTimeout(a),clearTimeout(n),this.isCapturingHotkey=!1,this.captureButton.textContent="Capture shortcut",this.captureButton.removeClass("capturing-hotkey"),document.removeEventListener("keydown",i,{capture:!0}),document.removeEventListener("keyup",c,{capture:!0}),document.removeEventListener("mousedown",u))};this.stopCapturingHotkey=o}stopCapturingHotkey(){}onClose(){this.isCapturingHotkey&&this.stopCapturingHotkey(),this.contentEl&&this.contentEl.replaceWith(this.contentEl.cloneNode(!0));let{contentEl:t}=this;t.empty()}};
